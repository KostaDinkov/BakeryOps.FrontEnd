openapi: 3.0.1
info:
  title: BakeryOps
  description: Application for bakery management
  version: v1
paths:
  /api/Categories/GetCategories:
    get:
      tags:
        - Categories
      responses:
        '200':
          description: OK
  '/api/Categories/GetCategory/{id}':
    get:
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/Categories/AddCategory:
    post:
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '200':
          description: OK
  /api/Categories/UpdateCategory:
    put:
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '200':
          description: OK
  '/api/Categories/DeleteCategory/{id}':
    delete:
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/Clients:
    get:
      tags:
        - Clients
      responses:
        '200':
          description: OK
    post:
      tags:
        - Clients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/ClientDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ClientDTO'
      responses:
        '200':
          description: OK
    put:
      tags:
        - Clients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/ClientDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ClientDTO'
      responses:
        '200':
          description: OK
  '/api/Clients/{id}':
    get:
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Materials/GetMaterials:
    get:
      tags:
        - Materials
      responses:
        '200':
          description: OK
  '/api/Materials/GetMaterial/{id}':
    get:
      tags:
        - Materials
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/Materials/AddMaterial:
    post:
      tags:
        - Materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/MaterialDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MaterialDTO'
      responses:
        '200':
          description: OK
  /api/Materials/UpdateMaterial:
    put:
      tags:
        - Materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/MaterialDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MaterialDTO'
      responses:
        '200':
          description: OK
  '/api/Materials/DeleteMaterial/{id}':
    delete:
      tags:
        - Materials
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  '/api/Orders/{id}':
    get:
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
    put:
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Orders:
    get:
      tags:
        - Orders
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
    post:
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '200':
          description: OK
  /api/Products/GetAllProducts:
    get:
      tags:
        - Products
      responses:
        '200':
          description: OK
  '/api/Products/GetProduct/{id}':
    get:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
  /api/Products/AddProduct:
    post:
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
  '/api/Products/UpdateProduct/{id}':
    put:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
  '/api/Products/DeleteProduct/{id}':
    delete:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Products/SyncDatabase/syncDatabase:
    get:
      tags:
        - Products
      responses:
        '200':
          description: OK
  /api/Security/GetToken:
    post:
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserCredentialsDTO'
      responses:
        '200':
          description: OK
  /api/Security/GetPermissions:
    get:
      tags:
        - Security
      responses:
        '200':
          description: OK
  /api/Users/GetUsers:
    get:
      tags:
        - Users
      responses:
        '200':
          description: OK
  '/api/Users/GetUserByUsername/{userName}':
    get:
      tags:
        - Users
      parameters:
        - name: userName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/api/Users/GetUserById/{userId}':
    get:
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/Users/AddUser:
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/NewUserDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/NewUserDTO'
      responses:
        '200':
          description: OK
  /api/Users/UpdateUser:
    put:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/NewUserDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/NewUserDTO'
      responses:
        '200':
          description: OK
  '/api/Users/DeleteUser/{id}':
    delete:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/Vendors/GetVendors:
    get:
      tags:
        - Vendors
      responses:
        '200':
          description: OK
  /api/Vendors/GetVendor:
    get:
      tags:
        - Vendors
      parameters:
        - name: id
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/Vendors/AddVendor:
    post:
      tags:
        - Vendors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/VendorDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VendorDTO'
      responses:
        '200':
          description: OK
  /api/Vendors/UpdateVendor:
    put:
      tags:
        - Vendors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/VendorDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VendorDTO'
      responses:
        '200':
          description: OK
  '/api/Vendors/DeleteVendor/{id}':
    delete:
      tags:
        - Vendors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
components:
  schemas:
    CategoryDTO:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
      additionalProperties: false
    ClientDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        discountPercent:
          type: integer
          format: int32
        isCompany:
          type: boolean
        isSpecialPrice:
          type: boolean
      additionalProperties: false
    MaterialDTO:
      required:
        - categoryId
        - id
        - name
        - unit
        - vendorId
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        unit:
          type: string
          nullable: true
        categoryId:
          type: string
          format: uuid
        vendorId:
          type: string
          format: uuid
      additionalProperties: false
    NewUserDTO:
      required:
        - password
      type: object
      properties:
        id:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    OrderDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        operatorId:
          type: integer
          format: int32
          nullable: true
        pickupDate:
          type: string
          format: date-time
          nullable: true
        createdDate:
          type: string
          format: date-time
          nullable: true
        clientName:
          type: string
          nullable: true
        clientPhone:
          type: string
          nullable: true
        clientId:
          type: integer
          format: int32
          nullable: true
        isPaid:
          type: boolean
          nullable: true
        advancePaiment:
          type: number
          format: double
          nullable: true
        status:
          $ref: '#/components/schemas/Status'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDTO'
          nullable: true
      additionalProperties: false
    OrderItemDTO:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        productAmount:
          type: number
          format: double
        description:
          type: string
          nullable: true
        cakeFoto:
          type: string
          nullable: true
        cakeTitle:
          type: string
          nullable: true
        itemUnitPrice:
          type: number
          format: double
        isInProgress:
          type: boolean
        isComplete:
          type: boolean
      additionalProperties: false
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        priceDrebno:
          type: number
          format: double
        priceEdro:
          type: number
          format: double
        hasDiscount:
          type: boolean
        keepPriceDrebno:
          type: boolean
        inPriceList:
          type: boolean
        unit:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        dateCreated:
          type: string
          format: date-time
      additionalProperties: false
    Status:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    UserCredentialsDTO:
      type: object
      properties:
        userName:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    VendorDTO:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      description: 'Enter the Bearer Authorization string as following: `Bearer Generated-JWT-Token`'
      scheme: Bearer
security:
  - Bearer: [ ]
